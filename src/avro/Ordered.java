/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Ordered extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"Ordered\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"usrId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"total_price\",\"type\":\"double\",\"default\":0.0}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public java.lang.String usrId;
	@Deprecated
	public java.lang.String date;
	@Deprecated
	public double total_price;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public Ordered() {
	}

	/**
	 * All-args constructor.
	 */
	public Ordered(java.lang.String usrId, java.lang.String date,
			java.lang.Double total_price) {
		this.usrId = usrId;
		this.date = date;
		this.total_price = total_price;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return usrId;
		case 1:
			return date;
		case 2:
			return total_price;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			usrId = (java.lang.String) value$;
			break;
		case 1:
			date = (java.lang.String) value$;
			break;
		case 2:
			total_price = (java.lang.Double) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'usrId' field.
	 */
	public java.lang.String getUsrId() {
		return usrId;
	}

	/**
	 * Sets the value of the 'usrId' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setUsrId(java.lang.String value) {
		this.usrId = value;
	}

	/**
	 * Gets the value of the 'date' field.
	 */
	public java.lang.String getDate() {
		return date;
	}

	/**
	 * Sets the value of the 'date' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setDate(java.lang.String value) {
		this.date = value;
	}

	/**
	 * Gets the value of the 'total_price' field.
	 */
	public java.lang.Double getTotalPrice() {
		return total_price;
	}

	/**
	 * Sets the value of the 'total_price' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setTotalPrice(java.lang.Double value) {
		this.total_price = value;
	}

	/** Creates a new Ordered RecordBuilder */
	public static avro.Ordered.Builder newBuilder() {
		return new avro.Ordered.Builder();
	}

	/** Creates a new Ordered RecordBuilder by copying an existing Builder */
	public static avro.Ordered.Builder newBuilder(avro.Ordered.Builder other) {
		return new avro.Ordered.Builder(other);
	}

	/**
	 * Creates a new Ordered RecordBuilder by copying an existing Ordered
	 * instance
	 */
	public static avro.Ordered.Builder newBuilder(avro.Ordered other) {
		return new avro.Ordered.Builder(other);
	}

	/**
	 * RecordBuilder for Ordered instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<Ordered>
			implements org.apache.avro.data.RecordBuilder<Ordered> {

		private java.lang.String usrId;
		private java.lang.String date;
		private double total_price;

		/** Creates a new Builder */
		private Builder() {
			super(avro.Ordered.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(avro.Ordered.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.usrId)) {
				this.usrId = (String) data().deepCopy(fields()[0].schema(),
						other.usrId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.date)) {
				this.date = (String) data().deepCopy(fields()[1].schema(),
						other.date);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.total_price)) {
				this.total_price = (Double) data().deepCopy(
						fields()[2].schema(), other.total_price);
				fieldSetFlags()[2] = true;
			}
		}

		/** Creates a Builder by copying an existing Ordered instance */
		private Builder(avro.Ordered other) {
			super(avro.Ordered.SCHEMA$);
			if (isValidValue(fields()[0], other.usrId)) {
				this.usrId = (String) data().deepCopy(fields()[0].schema(),
						other.usrId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.date)) {
				this.date = (String) data().deepCopy(fields()[1].schema(),
						other.date);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.total_price)) {
				this.total_price = (Double) data().deepCopy(
						fields()[2].schema(), other.total_price);
				fieldSetFlags()[2] = true;
			}
		}

		/** Gets the value of the 'usrId' field */
		public java.lang.String getUsrId() {
			return usrId;
		}

		/** Sets the value of the 'usrId' field */
		public avro.Ordered.Builder setUsrId(java.lang.String value) {
			validate(fields()[0], value);
			this.usrId = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'usrId' field has been set */
		public boolean hasUsrId() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'usrId' field */
		public avro.Ordered.Builder clearUsrId() {
			usrId = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'date' field */
		public java.lang.String getDate() {
			return date;
		}

		/** Sets the value of the 'date' field */
		public avro.Ordered.Builder setDate(java.lang.String value) {
			validate(fields()[1], value);
			this.date = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'date' field has been set */
		public boolean hasDate() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'date' field */
		public avro.Ordered.Builder clearDate() {
			date = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'total_price' field */
		public java.lang.Double getTotalPrice() {
			return total_price;
		}

		/** Sets the value of the 'total_price' field */
		public avro.Ordered.Builder setTotalPrice(double value) {
			validate(fields()[2], value);
			this.total_price = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'total_price' field has been set */
		public boolean hasTotalPrice() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'total_price' field */
		public avro.Ordered.Builder clearTotalPrice() {
			fieldSetFlags()[2] = false;
			return this;
		}

		@Override
		public Ordered build() {
			try {
				Ordered record = new Ordered();
				record.usrId = fieldSetFlags()[0] ? this.usrId
						: (java.lang.String) defaultValue(fields()[0]);
				record.date = fieldSetFlags()[1] ? this.date
						: (java.lang.String) defaultValue(fields()[1]);
				record.total_price = fieldSetFlags()[2] ? this.total_price
						: (java.lang.Double) defaultValue(fields()[2]);
				return record;
			} catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}
}
