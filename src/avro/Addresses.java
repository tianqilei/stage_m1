/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;  

import java.util.List;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Addresses extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Addresses\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"address\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<avro.Address> address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Addresses() {}

  /**
   * All-args constructor.
   */
  public Addresses(java.util.List<avro.Address> address) {
    this.address = address;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (java.util.List<avro.Address>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   */
  public java.util.List<avro.Address> getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.util.List<avro.Address> value) {
    this.address = value;
  }

  /** Creates a new Addresses RecordBuilder */
  public static avro.Addresses.Builder newBuilder() {
    return new avro.Addresses.Builder();
  }
  
  /** Creates a new Addresses RecordBuilder by copying an existing Builder */
  public static avro.Addresses.Builder newBuilder(avro.Addresses.Builder other) {
    return new avro.Addresses.Builder(other);
  }
  
  /** Creates a new Addresses RecordBuilder by copying an existing Addresses instance */
  public static avro.Addresses.Builder newBuilder(avro.Addresses other) {
    return new avro.Addresses.Builder(other);
  }
  
  /**
   * RecordBuilder for Addresses instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Addresses>
    implements org.apache.avro.data.RecordBuilder<Addresses> {

    private java.util.List<avro.Address> address;

    /** Creates a new Builder */
    private Builder() {
      super(avro.Addresses.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.Addresses.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = (List<Address>) data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Addresses instance */
    private Builder(avro.Addresses other) {
            super(avro.Addresses.SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = (List<Address>) data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'address' field */
    public java.util.List<avro.Address> getAddress() {
      return address;
    }
    
    /** Sets the value of the 'address' field */
    public avro.Addresses.Builder setAddress(java.util.List<avro.Address> value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'address' field */
    public avro.Addresses.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public Addresses build() {
      try {
        Addresses record = new Addresses();
        record.address = fieldSetFlags()[0] ? this.address : (java.util.List<avro.Address>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
