/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;  

import java.util.List;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderQuantitys extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderQuantitys\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"sale\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderQuantity\",\"fields\":[{\"name\":\"orderid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"quantity\",\"type\":\"int\",\"default\":0}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<avro.OrderQuantity> sale;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public OrderQuantitys() {}

  /**
   * All-args constructor.
   */
  public OrderQuantitys(java.util.List<avro.OrderQuantity> sale) {
    this.sale = sale;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sale;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sale = (java.util.List<avro.OrderQuantity>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sale' field.
   */
  public java.util.List<avro.OrderQuantity> getSale() {
    return sale;
  }

  /**
   * Sets the value of the 'sale' field.
   * @param value the value to set.
   */
  public void setSale(java.util.List<avro.OrderQuantity> value) {
    this.sale = value;
  }

  /** Creates a new OrderQuantitys RecordBuilder */
  public static avro.OrderQuantitys.Builder newBuilder() {
    return new avro.OrderQuantitys.Builder();
  }
  
  /** Creates a new OrderQuantitys RecordBuilder by copying an existing Builder */
  public static avro.OrderQuantitys.Builder newBuilder(avro.OrderQuantitys.Builder other) {
    return new avro.OrderQuantitys.Builder(other);
  }
  
  /** Creates a new OrderQuantitys RecordBuilder by copying an existing OrderQuantitys instance */
  public static avro.OrderQuantitys.Builder newBuilder(avro.OrderQuantitys other) {
    return new avro.OrderQuantitys.Builder(other);
  }
  
  /**
   * RecordBuilder for OrderQuantitys instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderQuantitys>
    implements org.apache.avro.data.RecordBuilder<OrderQuantitys> {

    private java.util.List<avro.OrderQuantity> sale;

    /** Creates a new Builder */
    private Builder() {
      super(avro.OrderQuantitys.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.OrderQuantitys.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sale)) {
        this.sale = (List<OrderQuantity>) data().deepCopy(fields()[0].schema(), other.sale);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing OrderQuantitys instance */
    private Builder(avro.OrderQuantitys other) {
            super(avro.OrderQuantitys.SCHEMA$);
      if (isValidValue(fields()[0], other.sale)) {
        this.sale = (List<OrderQuantity>) data().deepCopy(fields()[0].schema(), other.sale);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'sale' field */
    public java.util.List<avro.OrderQuantity> getSale() {
      return sale;
    }
    
    /** Sets the value of the 'sale' field */
    public avro.OrderQuantitys.Builder setSale(java.util.List<avro.OrderQuantity> value) {
      validate(fields()[0], value);
      this.sale = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sale' field has been set */
    public boolean hasSale() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sale' field */
    public avro.OrderQuantitys.Builder clearSale() {
      sale = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public OrderQuantitys build() {
      try {
        OrderQuantitys record = new OrderQuantitys();
        record.sale = fieldSetFlags()[0] ? this.sale : (java.util.List<avro.OrderQuantity>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
