/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Visit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Visit\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"itemId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"buy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String itemId;
  @Deprecated public java.lang.String time;
  @Deprecated public java.lang.String date;
  @Deprecated public java.lang.String buy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Visit() {}

  /**
   * All-args constructor.
   */
  public Visit(java.lang.String itemId, java.lang.String time, java.lang.String date, java.lang.String buy) {
    this.itemId = itemId;
    this.time = time;
    this.date = date;
    this.buy = buy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return itemId;
    case 1: return time;
    case 2: return date;
    case 3: return buy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: itemId = (java.lang.String)value$; break;
    case 1: time = (java.lang.String)value$; break;
    case 2: date = (java.lang.String)value$; break;
    case 3: buy = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'itemId' field.
   */
  public java.lang.String getItemId() {
    return itemId;
  }

  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(java.lang.String value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'time' field.
   */
  public java.lang.String getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'buy' field.
   */
  public java.lang.String getBuy() {
    return buy;
  }

  /**
   * Sets the value of the 'buy' field.
   * @param value the value to set.
   */
  public void setBuy(java.lang.String value) {
    this.buy = value;
  }

  /** Creates a new Visit RecordBuilder */
  public static avro.Visit.Builder newBuilder() {
    return new avro.Visit.Builder();
  }
  
  /** Creates a new Visit RecordBuilder by copying an existing Builder */
  public static avro.Visit.Builder newBuilder(avro.Visit.Builder other) {
    return new avro.Visit.Builder(other);
  }
  
  /** Creates a new Visit RecordBuilder by copying an existing Visit instance */
  public static avro.Visit.Builder newBuilder(avro.Visit other) {
    return new avro.Visit.Builder(other);
  }
  
  /**
   * RecordBuilder for Visit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Visit>
    implements org.apache.avro.data.RecordBuilder<Visit> {

    private java.lang.String itemId;
    private java.lang.String time;
    private java.lang.String date;
    private java.lang.String buy;

    /** Creates a new Builder */
    private Builder() {
      super(avro.Visit.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.Visit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = (String) data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = (String) data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = (String) data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.buy)) {
        this.buy = (String) data().deepCopy(fields()[3].schema(), other.buy);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Visit instance */
    private Builder(avro.Visit other) {
            super(avro.Visit.SCHEMA$);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = (String) data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = (String) data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = (String) data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.buy)) {
        this.buy = (String) data().deepCopy(fields()[3].schema(), other.buy);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'itemId' field */
    public java.lang.String getItemId() {
      return itemId;
    }
    
    /** Sets the value of the 'itemId' field */
    public avro.Visit.Builder setItemId(java.lang.String value) {
      validate(fields()[0], value);
      this.itemId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'itemId' field has been set */
    public boolean hasItemId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'itemId' field */
    public avro.Visit.Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'time' field */
    public java.lang.String getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public avro.Visit.Builder setTime(java.lang.String value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'time' field */
    public avro.Visit.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public java.lang.String getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public avro.Visit.Builder setDate(java.lang.String value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'date' field */
    public avro.Visit.Builder clearDate() {
      date = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'buy' field */
    public java.lang.String getBuy() {
      return buy;
    }
    
    /** Sets the value of the 'buy' field */
    public avro.Visit.Builder setBuy(java.lang.String value) {
      validate(fields()[3], value);
      this.buy = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'buy' field has been set */
    public boolean hasBuy() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'buy' field */
    public avro.Visit.Builder clearBuy() {
      buy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Visit build() {
      try {
        Visit record = new Visit();
        record.itemId = fieldSetFlags()[0] ? this.itemId : (java.lang.String) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.String) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.String) defaultValue(fields()[2]);
        record.buy = fieldSetFlags()[3] ? this.buy : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
