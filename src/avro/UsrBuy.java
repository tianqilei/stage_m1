/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UsrBuy extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UsrBuy\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"usrId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"sex\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"age\",\"type\":\"int\",\"default\":0},{\"name\":\"buy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String usrId;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String sex;
  @Deprecated public int age;
  @Deprecated public java.lang.String buy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UsrBuy() {}

  /**
   * All-args constructor.
   */
  public UsrBuy(java.lang.String usrId, java.lang.String name, java.lang.String sex, java.lang.Integer age, java.lang.String buy) {
    this.usrId = usrId;
    this.name = name;
    this.sex = sex;
    this.age = age;
    this.buy = buy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return usrId;
    case 1: return name;
    case 2: return sex;
    case 3: return age;
    case 4: return buy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: usrId = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: sex = (java.lang.String)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: buy = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'usrId' field.
   */
  public java.lang.String getUsrId() {
    return usrId;
  }

  /**
   * Sets the value of the 'usrId' field.
   * @param value the value to set.
   */
  public void setUsrId(java.lang.String value) {
    this.usrId = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sex' field.
   */
  public java.lang.String getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(java.lang.String value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'buy' field.
   */
  public java.lang.String getBuy() {
    return buy;
  }

  /**
   * Sets the value of the 'buy' field.
   * @param value the value to set.
   */
  public void setBuy(java.lang.String value) {
    this.buy = value;
  }

  /** Creates a new UsrBuy RecordBuilder */
  public static avro.UsrBuy.Builder newBuilder() {
    return new avro.UsrBuy.Builder();
  }
  
  /** Creates a new UsrBuy RecordBuilder by copying an existing Builder */
  public static avro.UsrBuy.Builder newBuilder(avro.UsrBuy.Builder other) {
    return new avro.UsrBuy.Builder(other);
  }
  
  /** Creates a new UsrBuy RecordBuilder by copying an existing UsrBuy instance */
  public static avro.UsrBuy.Builder newBuilder(avro.UsrBuy other) {
    return new avro.UsrBuy.Builder(other);
  }
  
  /**
   * RecordBuilder for UsrBuy instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UsrBuy>
    implements org.apache.avro.data.RecordBuilder<UsrBuy> {

    private java.lang.String usrId;
    private java.lang.String name;
    private java.lang.String sex;
    private int age;
    private java.lang.String buy;

    /** Creates a new Builder */
    private Builder() {
      super(avro.UsrBuy.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.UsrBuy.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.usrId)) {
        this.usrId = (String) data().deepCopy(fields()[0].schema(), other.usrId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = (String) data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = (String) data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = (Integer) data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.buy)) {
        this.buy = (String) data().deepCopy(fields()[4].schema(), other.buy);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UsrBuy instance */
    private Builder(avro.UsrBuy other) {
            super(avro.UsrBuy.SCHEMA$);
      if (isValidValue(fields()[0], other.usrId)) {
        this.usrId = (String) data().deepCopy(fields()[0].schema(), other.usrId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = (String) data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = (String) data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = (Integer) data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.buy)) {
        this.buy = (String) data().deepCopy(fields()[4].schema(), other.buy);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'usrId' field */
    public java.lang.String getUsrId() {
      return usrId;
    }
    
    /** Sets the value of the 'usrId' field */
    public avro.UsrBuy.Builder setUsrId(java.lang.String value) {
      validate(fields()[0], value);
      this.usrId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'usrId' field has been set */
    public boolean hasUsrId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'usrId' field */
    public avro.UsrBuy.Builder clearUsrId() {
      usrId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public avro.UsrBuy.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public avro.UsrBuy.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sex' field */
    public java.lang.String getSex() {
      return sex;
    }
    
    /** Sets the value of the 'sex' field */
    public avro.UsrBuy.Builder setSex(java.lang.String value) {
      validate(fields()[2], value);
      this.sex = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sex' field has been set */
    public boolean hasSex() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sex' field */
    public avro.UsrBuy.Builder clearSex() {
      sex = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public avro.UsrBuy.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'age' field */
    public avro.UsrBuy.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'buy' field */
    public java.lang.String getBuy() {
      return buy;
    }
    
    /** Sets the value of the 'buy' field */
    public avro.UsrBuy.Builder setBuy(java.lang.String value) {
      validate(fields()[4], value);
      this.buy = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'buy' field has been set */
    public boolean hasBuy() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'buy' field */
    public avro.UsrBuy.Builder clearBuy() {
      buy = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public UsrBuy build() {
      try {
        UsrBuy record = new UsrBuy();
        record.usrId = fieldSetFlags()[0] ? this.usrId : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.sex = fieldSetFlags()[2] ? this.sex : (java.lang.String) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.buy = fieldSetFlags()[4] ? this.buy : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
