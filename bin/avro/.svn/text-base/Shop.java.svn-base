/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Shop extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Shop\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"shopName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String shopName;
  @Deprecated public java.lang.String url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Shop() {}

  /**
   * All-args constructor.
   */
  public Shop(java.lang.String shopName, java.lang.String url) {
    this.shopName = shopName;
    this.url = url;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return shopName;
    case 1: return url;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: shopName = (java.lang.String)value$; break;
    case 1: url = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'shopName' field.
   */
  public java.lang.String getShopName() {
    return shopName;
  }

  /**
   * Sets the value of the 'shopName' field.
   * @param value the value to set.
   */
  public void setShopName(java.lang.String value) {
    this.shopName = value;
  }

  /**
   * Gets the value of the 'url' field.
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.String value) {
    this.url = value;
  }

  /** Creates a new Shop RecordBuilder */
  public static avro.Shop.Builder newBuilder() {
    return new avro.Shop.Builder();
  }
  
  /** Creates a new Shop RecordBuilder by copying an existing Builder */
  public static avro.Shop.Builder newBuilder(avro.Shop.Builder other) {
    return new avro.Shop.Builder(other);
  }
  
  /** Creates a new Shop RecordBuilder by copying an existing Shop instance */
  public static avro.Shop.Builder newBuilder(avro.Shop other) {
    return new avro.Shop.Builder(other);
  }
  
  /**
   * RecordBuilder for Shop instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Shop>
    implements org.apache.avro.data.RecordBuilder<Shop> {

    private java.lang.String shopName;
    private java.lang.String url;

    /** Creates a new Builder */
    private Builder() {
      super(avro.Shop.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.Shop.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.shopName)) {
        this.shopName = (String) data().deepCopy(fields()[0].schema(), other.shopName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = (String) data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Shop instance */
    private Builder(avro.Shop other) {
            super(avro.Shop.SCHEMA$);
      if (isValidValue(fields()[0], other.shopName)) {
        this.shopName = (String) data().deepCopy(fields()[0].schema(), other.shopName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = (String) data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'shopName' field */
    public java.lang.String getShopName() {
      return shopName;
    }
    
    /** Sets the value of the 'shopName' field */
    public avro.Shop.Builder setShopName(java.lang.String value) {
      validate(fields()[0], value);
      this.shopName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'shopName' field has been set */
    public boolean hasShopName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'shopName' field */
    public avro.Shop.Builder clearShopName() {
      shopName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'url' field */
    public java.lang.String getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public avro.Shop.Builder setUrl(java.lang.String value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'url' field */
    public avro.Shop.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Shop build() {
      try {
        Shop record = new Shop();
        record.shopName = fieldSetFlags()[0] ? this.shopName : (java.lang.String) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
